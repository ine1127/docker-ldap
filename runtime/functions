#!/bin/bash
#
# functions for entrypoint.sh

source ${CONST_LDAP_RUNTIME_DIR}/environments

function __slapd_load_domain() {
  _LDAP_DOMAIN_DN=$(echo dc=${LDAP_DOMAIN} | sed -e 's/\./,dc=/g')
  _LDAP_DOMAIN_RDN=$(echo ${LDAP_DOMAIN} | awk -F "." '{print $1}')
  _LDAP_MANAGER_DOMAIN=$(echo dc=${LDAP_MANAGER_DOMAIN} | sed -e 's/\./,dc=/g')
}

function __mkldif_global() {
  cat << EOF > ${CONST_LDAP_WORK_DIR}/tmp_global.ldif
dn: cn=config
objectClass: olcGlobal
cn: config
olcArgsFile: /var/run/openldap/slapd.args
olcPidFile: /var/run/openldap/slapd.pid
olcAllows: bind_v2
olcAttributeOptions: lang-
olcAuthzPolicy: none
olcConcurrency: 0
olcConnMaxPending: 100
olcConnMaxPendingAuth: 1000
olcGentleHUP: FALSE
olcIdleTimeout: 0
olcIndexSubstrIfMaxLen: 4
olcIndexSubstrIfMinLen: 2
olcIndexSubstrAnyLen: 4
olcIndexSubstrAnyStep: 2
olcIndexIntLen: 4
olcListenerThreads: 1
olcLocalSSF: 71
olcLogLevel: 0
olcReadOnly: FALSE
olcReverseLookup: FALSE
olcSaslSecProps: noplain,noanonymous
olcSockbufMaxIncoming: 262143
olcSockbufMaxIncomingAuth: 16777215

EOF
}

function __mkldif_schema() {
  cat << EOF > ${CONST_LDAP_WORK_DIR}/tmp_schema.ldif
dn: cn=schema,cn=config
objectClass: olcSchemaConfig
cn: schema

include: file:///etc/openldap/schema/corba.ldif
include: file:///etc/openldap/schema/core.ldif
include: file:///etc/openldap/schema/cosine.ldif
include: file:///etc/openldap/schema/inetorgperson.ldif
include: file:///etc/openldap/schema/nis.ldif
include: file:///etc/openldap/schema/openldap.ldif

EOF
}

function __mkldif_frontend() {
  cat << EOF > ${CONST_LDAP_WORK_DIR}/tmp_frontend.ldif
dn: olcDatabase=frontend,cn=config
objectClass: olcDatabaseConfig
objectClass: olcFrontendConfig
olcDatabase: frontend
olcAddContentAcl: FALSE
olcLastMod: TRUE
olcMaxDerefDepth: 0
olcReadOnly: FALSE
olcSchemaDN: cn=Subschema
olcSyncUseSubentry: FALSE
olcMonitoring: FALSE

EOF
}

function __mkldif_config() {
  local _ldap_manager_pass_crypt=$(/usr/sbin/slappasswd -s ${LDAP_MANAGER_PASS})

  cat << EOF > ${CONST_LDAP_WORK_DIR}/tmp_config.ldif
dn: olcDatabase=config,cn=config
objectClass: olcDatabaseConfig
olcDatabase: config
olcAccess: to *
  by dn.base="gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth" manage
  by * none
olcAddContentAcl: TRUE
olcLastMod: TRUE
olcMaxDerefDepth: 15
olcReadOnly: FALSE
olcRootDN: cn=config
olcRootPW: ${_ldap_manager_pass_crypt}
olcSyncUseSubentry: FALSE
olcMonitoring: FALSE

EOF
}

function __mkldif_monitor() {
  cat << EOF > ${CONST_LDAP_WORK_DIR}/tmp_monitor.ldif
dn: olcDatabase=monitor,cn=config
objectClass: olcDatabaseConfig
olcDatabase: monitor
olcAccess: to *
  by dn.base="gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth" read
  by dn.base="cn=${LDAP_MANAGER_NAME},${_LDAP_MANAGER_DOMAIN}" read
  by * none
olcAddContentAcl: FALSE
olcLastMod: TRUE
olcMaxDerefDepth: 15
olcReadOnly: FALSE
olcSyncUseSubentry: FALSE
olcMonitoring: FALSE

EOF
}

function __mkldif_mdb() {
  local _ldap_manager_pass_crypt=$(/usr/sbin/slappasswd -s ${LDAP_MANAGER_PASS})

  cat << EOF > ${CONST_LDAP_WORK_DIR}/tmp_mdb.ldif
dn: olcDatabase=mdb,cn=config
objectClass: olcDatabaseConfig
objectClass: olcMdbConfig
olcDatabase: mdb
olcReadOnly: FALSE
olcAddContentAcl: FALSE
olcLastMod: TRUE
olcMaxDerefDepth: 15
olcMonitoring: TRUE
olcRootDN: cn=${LDAP_MANAGER_NAME},${_LDAP_MANAGER_DOMAIN}
olcRootPW: ${_ldap_manager_pass_crypt}
olcSuffix: ${_LDAP_DOMAIN_DN}
olcSyncUseSubentry: FALSE
olcDbCheckpoint: 1024 15
olcDbNoSync: FALSE
olcDbDirectory: ${CONST_LDAP_DBDATA_DIR}
olcDbMode: 0600
olcDbSearchStack: 16
olcDbIndex: objectClass pres,eq
olcDbIndex: cn pres,eq,sub
olcDbIndex: uid pres,eq,sub
olcDbIndex: uidNumber pres,eq
olcDbIndex: gidNumber pres,eq
olcDbIndex: mail pres,eq,sub
olcDbIndex: ou pres,eq,sub
olcDbIndex: sn pres,eq,sub
olcDbIndex: givenName pres,eq,sub
olcDbIndex: loginShell pres,eq
olcDbIndex: memberUid pres,eq,sub
olcDbIndex: nisMapName pres,eq,sub
olcDbIndex: nisMapEntry pres,eq,sub

EOF
}

function __mkldif_bdb() {
  local _ldap_manager_pass_crypt=$(/usr/sbin/slappasswd -s ${LDAP_MANAGER_PASS})

  cat << EOF > ${CONST_LDAP_WORK_DIR}/tmp_bdb.ldif
dn: olcDatabase=bdb,cn=config
objectClass: olcDatabaseConfig
objectClass: olcBdbConfig
olcDatabase: bdb
olcReadOnly: FALSE
olcAddContentAcl: FALSE
olcLastMod: TRUE
olcMaxDerefDepth: 15
olcMonitoring: TRUE
olcRootDN: cn=${LDAP_MANAGER_NAME},${_LDAP_MANAGER_DOMAIN}
olcRootPW: ${_ldap_manager_pass_crypt}
olcSuffix: ${_LDAP_DOMAIN_DN}
olcSyncUseSubentry: FALSE
olcDbCacheSize: 1000
olcDbCheckpoint: 1024 15
olcDbDirectory: ${CONST_LDAP_DBDATA_DIR}
olcDbMode: 0600
olcDbSearchStack: 16
olcDbChecksum: FALSE
olcDbNoSync: FALSE
olcDbDirtyRead: FALSE
olcDbIDLcacheSize: 0
olcDbShmKey: 0
olcDbCacheFree: 1
olcDbDNcacheSize: 0
olcDbConfig: set_cachesize 0 1048576 0
olcDbConfig: set_lg_bsize 2097152
olcDbConfig: set_data_dir .
olcDbConfig: set_lg_dir .
olcDbIndex: objectClass pres,eq
olcDbIndex: cn pres,eq,sub
olcDbIndex: uid pres,eq,sub
olcDbIndex: uidNumber pres,eq
olcDbIndex: gidNumber pres,eq
olcDbIndex: mail pres,eq,sub
olcDbIndex: ou pres,eq,sub
olcDbIndex: sn pres,eq,sub
olcDbIndex: givenName pres,eq,sub
olcDbIndex: loginShell pres,eq
olcDbIndex: memberUid pres,eq,sub
olcDbIndex: nisMapName pres,eq,sub
olcDbIndex: nisMapEntry pres,eq,sub

EOF
}

function __mkldif_tls() {
  cat << EOF > ${CONST_LDAP_WORK_DIR}/tmp_tls.ldif
olcTLSCACertificatePath: ${CONST_LDAP_CERTS_DIR}
olcTLSCACertificateFile: ${CONST_LDAP_CERTS_DIR}/${CA_PEM_FILE}
olcTLSCertificateFile: "${NSSDB_CERT_NAME}"
olcTLSCertificateKeyFile: ${CONST_LDAP_CERTS_DIR}/password
olcTLSCRLCheck: none
olcTLSVerifyClient: never
olcTLSProtocolMin: 3.2

EOF
}

function __mkldif_base_domain() {
  cat << EOF > ${CONST_LDAP_WORK_DIR}/tmp_base_domain.ldif
dn: ${_LDAP_DOMAIN_DN}
objectClass: dcObject
objectClass: organization
dc: ${_LDAP_DOMAIN_RDN}
o: ${LDAP_ORGNAME}
description: ${LDAP_ORGNAME_DESC}

EOF
}

function __mkldif_unit_user() {
  cat << EOF > ${CONST_LDAP_WORK_DIR}/tmp_unit_user.ldif
dn: ou=${LDAP_PEOPLE},${_LDAP_DOMAIN_DN}
objectClass: organizationalUnit
ou: ${LDAP_PEOPLE}
description: ${LDAP_PEOPLE_DESC}

EOF
}

function __mkldif_unit_group() {
  cat << EOF > ${CONST_LDAP_WORK_DIR}/tmp_unit_group.ldif
dn: ou=${LDAP_GROUP},${_LDAP_DOMAIN_DN}
objectClass: organizationalUnit
ou: ${LDAP_GROUP}
description: ${LDAP_GROUP_DESC}

EOF
}

function __switch_user() {
# __switch_user ${_exec_user} ${_exec_cmd} ${_exec_option}

  local _exec_user="$1"
  local _exec_cmd="$2"
  shift 2
  local _exec_option="$@"

  local _cmd_path
  for _cmd_path in $(echo ${PATH} | sed -e 's/\:/\ /g')
  do
    if [ -f ${_cmd_path}/${_exec_cmd} ]; then
      runuser -m -s ${_cmd_path}/${_exec_cmd} -- ${_exec_user} ${_exec_option}
      local _status=$?
      break
    fi
  done

  return ${_status}
}

function __set_slapd_uri() {
  if [ "${SLAPD_LDAP}" = "yes" ]; then
    _SLAPD_LDAP_ARGS="ldap:///"
  fi

  if [ "${SLAPD_LDAPI}" = "yes" ]; then
    _SLAPD_LDAPI_ARGS="ldapi:///"
  fi

  if [ "${SLAPD_LDAPS}" = "yes" ]; then
    _SLAPD_LDAPS_ARGS="ldaps:///"
    __join_ldif ${CONST_LDAP_WORK_DIR}/tmp_global.ldif \
                ${CONST_LDAP_WORK_DIR}/tmp_tls.ldif
  fi
}

function __join_ldif() {
  local _src_ldif="$1"
  local _add_ldif="$2"

  if [ $# -ne 2 ]; then
    if [ ! -s ${_src_ldif} -o ! -s ${_add_ldif} ]; then
      return 1
    fi
  fi

  sed -i -e '/^$/d' ${_src_ldif}

  cat ${_src_ldif} ${_add_ldif} > ${CONST_LDAP_WORK_DIR}/tmp_swap.ldif

  mv ${CONST_LDAP_WORK_DIR}/tmp_swap.ldif ${_src_ldif}
  rm ${_add_ldif}
}

function __mkcert_selfsigned() {
  if [ "${GENERATE_SELFSIGNED_CACERT}" = "yes" ]; then
    if [ ! -s "${CONST_LDAP_NSSDB_KEY}" -a ! -s ${CONST_LDAP_NSSDB_CERT} -a ! -s ${CONST_LDAP_NSSDB_SECMOD} ]; then
      __switch_user ldap test -O ${CONST_LDAP_CERTS_DIR} || \
        chown ldap ${CONST_LDAP_CERTS_DIR}

      umask 0026

      dd if=/dev/urandom bs=32 count=1 2> /dev/null | base64 \
        > ${CONST_LDAP_NSSDB_NOISE}
      echo ${NSSDB_PASS} > ${CONST_LDAP_NSSDB_PASS}

      __switch_user ldap test -G ${CONST_LDAP_NSSDB_NOISE} || \
        chgrp ldap ${CONST_LDAP_NSSDB_NOISE}

      __switch_user ldap test -G ${CONST_LDAP_NSSDB_PASS} || \
        chgrp ldap ${CONST_LDAP_NSSDB_PASS}

      # Create New Key Databases
      __switch_user ldap certutil -N  \
        -d "${CONST_LDAP_CERTS_DIR}"   \
        -f "${CONST_LDAP_NSSDB_PASS}"

     umask 0022

      # Create New CA Certicicate (Self Signed)
      certutil -S -x             \
        -d "${CONST_LDAP_CERTS_DIR}"   \
        -f "${CONST_LDAP_NSSDB_PASS}"  \
        -z "${CONST_LDAP_NSSDB_NOISE}" \
        -n "${NSSDB_CACERT_NAME}"\
        -s "CN=CAcert"           \
        -t "CT,,"                \
        -k "rsa"                 \
        -Z "SHA512"              \
        -g "4096"                \
        -v "120"

      # Create New Certificate Signed CA
      certutil -S                \
        -d "${CONST_LDAP_CERTS_DIR}"   \
        -f "${CONST_LDAP_NSSDB_PASS}"  \
        -z "${CONST_LDAP_NSSDB_NOISE}" \
        -c "${NSSDB_CACERT_NAME}"\
        -n "${NSSDB_CERT_NAME}"  \
        -s "CN=${SSL_HOSTNAME}"  \
        -t "u,u,u"               \
        -k "rsa"                 \
        -Z "SHA512"              \
        -g "4096"                \
        -v "120"                 \
        -8 "${SSL_HOSTNAME},localhost,localhost.localdomain"
    fi

    if [ ! -s ${CONST_LDAP_CERTS_DIR}/${CA_PEM_FILE} ]; then
      certutil -L                \
        -d "${CONST_LDAP_CERTS_DIR}"   \
        -f "${CONST_LDAP_NSSDB_PASS}"  \
        -n "${NSSDB_CACERT_NAME}"\
        -a > ${CONST_LDAP_CERTS_DIR}/${CA_PEM_FILE}
    fi

    if [ ! -s ${CONST_LDAP_CERTS_DIR}/${SERVER_PEM_FILE} ]; then
      certutil -L                \
        -d "${CONST_LDAP_CERTS_DIR}"   \
        -f "${CONST_LDAP_NSSDB_PASS}"  \
        -n "${NSSDB_CERT_NAME}"  \
        -a > ${CONST_LDAP_CERTS_DIR}/${SERVER_PEM_FILE}
    fi
  fi
}

function __choose_database() {
  case ${LDAP_DATABASE} in
    mdb )
      __mkldif_mdb
    ;;
    bdb )
      __mkldif_bdb
    ;;
    * )
      echo "${LDAP_DATABASE} is none" >&2
    ;;
  esac
}

function __slapd_backup() {
  if [ ! -z $1 ]; then
    if [ ! -d ${LDAP_BACKUP_DIR} ]; then
      mkdir ${LDAP_BACKUP_DIR}
    fi

    case $1 in
      config )
        slapcat -F ${CONST_LDAP_CONFIG_DIR} -n 0 \
          -l ${LDAP_BACKUP_DIR}/slapd_config.ldif
        slapcat -F ${CONST_LDAP_CONFIG_DIR} \
          -l ${LDAP_BACKUP_DIR}/slapd_data.ldif
      ;;
      dbdata )
        case ${LDAP_DATABASE} in
         mdb )
           mdb_copy ${CONST_LDAP_DBDATA_DIR} ${LDAP_BACKUP_DIR}
         ;;
         bdb )
           db_hotbackup -Dc -h ${CONST_LDAP_DBDATA_DIR} -b ${LDAP_BACKUP_DIR}
           db_verify -h ${CONST_LDAP_DBDATA_DIR} $(ls ${LDAP_BACKUP_DIR}/*.bdb)
         ;;
         * )
           echo "${LDAP_DATABASE} is none" >&2
         ;;
        esac
      ;;
      * )
        echo "Invalid argument $1" >&2
      ;;
    esac
  fi
}

function __slapd_deploy() {
  __mkldif_global
  __mkldif_schema
  __mkldif_frontend
  __mkldif_config
  __mkldif_monitor
  __mkldif_tls

  __choose_database

  __set_slapd_uri
  __mkcert_selfsigned

  cat ${CONST_LDAP_WORK_DIR}/tmp_global.ldif   \
      ${CONST_LDAP_WORK_DIR}/tmp_schema.ldif   \
      ${CONST_LDAP_WORK_DIR}/tmp_frontend.ldif \
      ${CONST_LDAP_WORK_DIR}/tmp_config.ldif   \
      ${CONST_LDAP_WORK_DIR}/tmp_monitor.ldif  \
      ${CONST_LDAP_WORK_DIR}/tmp_${LDAP_DATABASE}.ldif      \
    > ${CONST_LDAP_WORK_DIR}/config.ldif

  __mkldif_base_domain
  __mkldif_unit_user
  __mkldif_unit_group

  cat ${CONST_LDAP_WORK_DIR}/tmp_base_domain.ldif \
      ${CONST_LDAP_WORK_DIR}/tmp_unit_user.ldif   \
      ${CONST_LDAP_WORK_DIR}/tmp_unit_group.ldif  \
    > ${CONST_LDAP_WORK_DIR}/base.ldif
}

function __slapd_install() {
  __switch_user ldap test -O ${CONST_LDAP_CONFIG_DIR} || \
    chown ldap ${CONST_LDAP_CONFIG_DIR}

  __switch_user ldap test -O ${CONST_LDAP_DBDATA_DIR} || \
    chown ldap ${CONST_LDAP_DBDATA_DIR}

  if [ ! -e ${CONST_LDAP_CONFIG_DIR}/.slapd_installed ]; then
    __switch_user ldap slapadd -v -F ${CONST_LDAP_CONFIG_DIR} \
      -n 0 -l ${CONST_LDAP_WORK_DIR}/config.ldif
    __switch_user ldap slapadd -v -F ${CONST_LDAP_CONFIG_DIR} \
      -n 2 -l ${CONST_LDAP_WORK_DIR}/base.ldif

    touch ${CONST_LDAP_CONFIG_DIR}/.slapd_installed
  fi
}

function __slapd_cleanup() {
  rm -rf ${CONST_LDAP_WORK_DIR}/tmp_*
}

function __slapd_call_pid() {
  _PID=

  _PID_FILE="/var/run/openldap/slapd.pid"

  if [ -s ${_PID_FILE} ]; then
    _PID=$(cat ${_PID_FILE})
  fi

  _PID=${_PID:-noproc}
}

function __slapd_start() {
  __slapd_call_pid

  if [ "noproc" = "${_PID}" ]; then
    exec /usr/sbin/slapd -d ${SLAPD_DEBUG_LEVEL} \
    -h "${_SLAPD_LDAP_ARGS} ${_SLAPD_LDAPI_ARGS} ${_SLAPD_LDAPS_ARGS}" \
    -F ${CONST_LDAP_CONFIG_DIR} \
    -u ldap
  fi
}

function __slapd_stop() {
  __slapd_call_pid

  if [ "noproc" != "${_PID}" ]; then
    kill -INT ${_PID}
    rm ${_PID_FILE}
  fi
}

function __slapd_status() {
  __slapd_call_pid

  if [ "noproc" != "${_PID}" ]; then
    echo "running slapd... [Pid: ${_PID}]"
  else
    echo "stopping slapd..."
  fi
}
