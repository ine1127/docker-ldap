#!/bin/bash
#
# functions for entrypoint.sh

source ${CONST_LDAP_RUNTIME_DIR}/environments

function __slapd_load_domain() {
  _LDAP_DOMAIN_DN=$(echo dc=${LDAP_DOMAIN} | sed -e 's/\./,dc=/g')
  _LDAP_DOMAIN_RDN=$(echo ${LDAP_DOMAIN} | awk -F "." '{print $1}')
  _LDAP_MANAGER_DOMAIN=$(echo dc=${LDAP_MANAGER_DOMAIN} | sed -e 's/\./,dc=/g')
}

function __em_from_rm() {
  echo "$1" \
    | sed -e 's/\"/\\\"/g'     \
          -e 's/\*/\\\*/g'     \
          -e 's/by /\\  by /g'
}

function __genldif_install() {
# _rmline = Raw meta character line
# _emline = escape meta character line
  local _rmline _emline
  local _ldap_manager_pass_crypt=$(/usr/sbin/slappasswd -s ${LDAP_MANAGER_PASS})

  cat ${CONST_LDAP_RUNTIME_DIR}/config/[0-8][0-9]*.ldif | while read _rmline; do
    _emline=$(__em_from_rm "${_rmline}")
    eval echo "${_emline}" >> ${CONST_LDAP_WORK_DIR}/tmp_config.ldif
  done
}

function __genldif_database() {
  local _line
  local _ldap_manager_pass_crypt=$(/usr/sbin/slappasswd -s ${LDAP_MANAGER_PASS})

  cat ${CONST_LDAP_RUNTIME_DIR}/config/database/${_USE_DATABASE} | while read _rmline; do
    _emline=$(__em_from_rm "${_rmline}")
    eval echo "${_emline}" >> ${CONST_LDAP_WORK_DIR}/tmp_${LDAP_DATABASE}.ldif
  done
}

function __genldif_baseentry() {
  local _line

  cat ${CONST_LDAP_RUNTIME_DIR}/config/entry/*.ldif | while read _line; do
    _line=$(echo "${_line}" | sed -e 's/\"/\\\"/g' -e 's/\*/\\\*/g' -e 's/by /\\  by /g')
    eval echo "${_line}" >> ${CONST_LDAP_WORK_DIR}/entry.ldif
  done
}

function __switch_user() {
# __switch_user ${_exec_user} ${_exec_cmd} ${_exec_option}

  local _exec_user="$1"
  local _exec_cmd="$2"
  shift 2
  local _exec_option="$@"

  local _cmd_path
  for _cmd_path in $(echo ${PATH} | sed -e 's/\:/\ /g'); do
    if [ -f ${_cmd_path}/${_exec_cmd} ]; then
      runuser -m -s ${_cmd_path}/${_exec_cmd} -- ${_exec_user} ${_exec_option}
      local _status=$?
      break
    fi
  done

  return ${_status}
}

function __set_slapd_uri() {
  if [ "${SLAPD_LDAP}" = "yes" ]; then
    _SLAPD_LDAP_URI="ldap:///"
  fi

  if [ "${SLAPD_LDAPI}" = "yes" ]; then
    _SLAPD_LDAPI_URI="ldapi:///"
  fi

  if [ "${SLAPD_LDAPS}" = "yes" ]; then
    _SLAPD_LDAPS_URI="ldaps:///"
  fi
}

function __join_ldif() {
  local _src_ldif="$1"
  local _add_ldif="$2"

  if [ $# -ne 2 ]; then
    if [ ! -s ${_src_ldif} -o ! -s ${_add_ldif} ]; then
      return 1
    fi
  fi

  sed -i -e '/^$/d' ${_src_ldif}

  cat ${_src_ldif} ${_add_ldif} > ${CONST_LDAP_WORK_DIR}/tmp_swap.ldif

  mv ${CONST_LDAP_WORK_DIR}/tmp_swap.ldif ${_src_ldif}
}

function __mkcert_selfsigned() {
  if [ ! -z ${NSSDB_PREFIX} ]; then
    readonly local _dbfile_prefix="-P ${NSSDB_PREFIX}"
  fi

  __switch_user ldap test -O ${CONST_LDAP_CERTS_DIR} || \
    chown ldap ${CONST_LDAP_CERTS_DIR}
  local _default_umask=$(umask)
  umask 0026

  # Create noise File
  dd if=/dev/urandom bs=32 count=1 2> /dev/null | base64 \
    > ${CONST_LDAP_NSSDB_NOISE}

  # Create password File
  echo ${NSSDB_PASS} > ${CONST_LDAP_NSSDB_PASS}

  __switch_user ldap test -G ${CONST_LDAP_NSSDB_NOISE} || \
    chgrp ldap ${CONST_LDAP_NSSDB_NOISE}

  __switch_user ldap test -G ${CONST_LDAP_NSSDB_PASS} || \
    chgrp ldap ${CONST_LDAP_NSSDB_PASS}

  if [ ! -s "${CONST_LDAP_CERTS_DIR}/${NSSDB_PREFIX}key3.db" -a ! -s "${CONST_LDAP_CERTS_DIR}/${NSSDB_PREFIX}/${NSSDB_PREFIX}cert8.db" -a ! -s ${CONST_LDAP_NSSDB_SECMOD} ]; then
    # Create New Key Databases
    __switch_user ldap certutil -N   \
      -d "${CONST_LDAP_CERTS_DIR}"   \
      -f "${CONST_LDAP_NSSDB_PASS}"  \
      ${_dbfile_prefix}
  fi

  umask ${_default_umask}

  certutil -L -d ./certs/ -n "${NSSDB_CACERT_NAME}" > /dev/null 2>&1
  local _cert_status=$?

  if [ ${_cert_status} -ne 0 ]; then
    # Create New CA Certicicate (Self Signed)
    certutil -S -x                   \
      -d "${CONST_LDAP_CERTS_DIR}"   \
      -f "${CONST_LDAP_NSSDB_PASS}"  \
      -z "${CONST_LDAP_NSSDB_NOISE}" \
      -n "${NSSDB_CACERT_NAME}"      \
      -s "CN=CAcert"           \
      -t "CT,,"                \
      -k "rsa"                 \
      -Z "SHA512"              \
      -g "4096"                \
      -v "120"                 \
      ${_dbfile_prefix}
  fi

  certutil -L -d ./certs/ -n "${NSSDB_CERT_NAME}" > /dev/null 2>&1
  local _cert_status=$?

  if  [ ${_cert_status} -ne 0 ]; then
    # Create New Certificate Signed CA
    certutil -S                      \
      -d "${CONST_LDAP_CERTS_DIR}"   \
      -f "${CONST_LDAP_NSSDB_PASS}"  \
      -z "${CONST_LDAP_NSSDB_NOISE}" \
      -c "${NSSDB_CACERT_NAME}"      \
      -n "${NSSDB_CERT_NAME}"  \
      -s "CN=${SSL_HOSTNAME}"  \
      -t "u,u,u"               \
      -k "rsa"                 \
      -Z "SHA512"              \
      -g "4096"                \
      -v "120"                 \
      -8 "${SSL_HOSTNAME},localhost,localhost.localdomain" \
      ${_dbfile_prefix}
  fi

  if [ ! -s ${CONST_LDAP_CERTS_DIR}/${CA_PEM_FILE} ]; then
    certutil -L                      \
      -d "${CONST_LDAP_CERTS_DIR}"   \
      -f "${CONST_LDAP_NSSDB_PASS}"  \
      -n "${NSSDB_CACERT_NAME}"      \
      ${_dbfile_prefix}              \
      -a > ${CONST_LDAP_CERTS_DIR}/${CA_PEM_FILE}
  fi

  if [ ! -s ${CONST_LDAP_CERTS_DIR}/${SERVER_PEM_FILE} ]; then
    certutil -L                      \
      -d "${CONST_LDAP_CERTS_DIR}"   \
      -f "${CONST_LDAP_NSSDB_PASS}"  \
      -n "${NSSDB_CERT_NAME}"        \
      ${_dbfile_prefix}              \
      -a > ${CONST_LDAP_CERTS_DIR}/${SERVER_PEM_FILE}
  fi
}

function __choose_database() {
  case ${LDAP_DATABASE} in
    mdb )
      _USE_DATABASE="mdb.ldif"
    ;;
    bdb )
      _USE_DATABASE="bdb.ldif"
    ;;
    * )
      echo "${LDAP_DATABASE} is none" >&2
    ;;
  esac
}

function __slapd_backup() {
  if [ ! -z $1 ]; then
    if [ ! -d ${CONST_LDAP_BACKUP_DIR} ]; then
      mkdir ${CONST_LDAP_BACKUP_DIR}
    fi

    case $1 in
      config )
        slapcat -F ${CONST_LDAP_CONFIG_DIR} -n 0 \
          -l ${CONST_LDAP_BACKUP_DIR}/slapd_config.ldif
        slapcat -F ${CONST_LDAP_CONFIG_DIR} \
          -l ${CONST_LDAP_BACKUP_DIR}/slapd_data.ldif
      ;;
      dbdata )
        case ${LDAP_DATABASE} in
         mdb )
           mdb_copy ${CONST_LDAP_DBDATA_DIR} ${CONST_LDAP_BACKUP_DIR}
         ;;
         bdb )
           db_hotbackup -Dc -h ${CONST_LDAP_DBDATA_DIR} -b ${CONST_LDAP_BACKUP_DIR}
           db_verify -h ${CONST_LDAP_DBDATA_DIR} $(ls ${CONST_LDAP_BACKUP_DIR}/*.bdb)
         ;;
         * )
           echo "${LDAP_DATABASE} is none" >&2
         ;;
        esac
      ;;
      * )
        echo "Invalid argument $1" >&2
      ;;
    esac
  fi
}

function __slapd_deploy() {
  if [ "${SLAPD_LDAPS}" = "yes" ]; then
    __join_ldif ${CONST_LDAP_RUNTIME_DIR}/config/10-global.ldif \
                ${CONST_LDAP_RUNTIME_DIR}/config/99-tls.ldif

    __mkcert_selfsigned
  fi

  __choose_database
  __genldif_install
  __genldif_database
  __genldif_baseentry

  __set_slapd_uri

  cat ${CONST_LDAP_WORK_DIR}/tmp_config.ldif            \
      ${CONST_LDAP_WORK_DIR}/tmp_${LDAP_DATABASE}.ldif  \
    > ${CONST_LDAP_WORK_DIR}/config.ldif
}

function __slapd_install() {
  __switch_user ldap test -O ${CONST_LDAP_CONFIG_DIR} || \
    chown ldap ${CONST_LDAP_CONFIG_DIR}

  __switch_user ldap test -O ${CONST_LDAP_DBDATA_DIR} || \
    chown ldap ${CONST_LDAP_DBDATA_DIR}

  if [ ! -e ${CONST_LDAP_CONFIG_DIR}/.slapd_installed ]; then
    __switch_user ldap slapadd -v -F ${CONST_LDAP_CONFIG_DIR} \
      -n 0 -l ${CONST_LDAP_WORK_DIR}/config.ldif
    __switch_user ldap slapadd -v -F ${CONST_LDAP_CONFIG_DIR} \
      -n 2 -l ${CONST_LDAP_WORK_DIR}/entry.ldif

    touch ${CONST_LDAP_CONFIG_DIR}/.slapd_installed
  fi
}

function __slapd_cleanup() {
  rm -rf ${CONST_LDAP_WORK_DIR}/tmp_*
}

function __slapd_call_pid() {
  _PID_FILE="/var/run/openldap/slapd.pid"

  if [ -s ${_PID_FILE} ]; then
    _PID=$(cat ${_PID_FILE})
  fi

  _PID=${_PID:-noproc}
}

function __slapd_start() {
  __slapd_call_pid

  if [ "noproc" = "${_PID}" ]; then
    exec /usr/sbin/slapd -d ${SLAPD_DEBUG_LEVEL} \
    -h "${_SLAPD_LDAP_URI} ${_SLAPD_LDAPI_URI} ${_SLAPD_LDAPS_URI}" \
    -F ${CONST_LDAP_CONFIG_DIR} \
    -u ldap
  fi
}

function __slapd_stop() {
  __slapd_call_pid

  if [ "noproc" != "${_PID}" ]; then
    kill -INT ${_PID}
    rm ${_PID_FILE}
  fi
}

function __slapd_status() {
  __slapd_call_pid

  if [ "noproc" != "${_PID}" ]; then
    echo "running slapd... [Pid: ${_PID}]"
  else
    echo "stopping slapd..."
  fi
}
