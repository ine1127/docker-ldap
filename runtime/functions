#!/bin/bash
#
# functions for entrypoint.sh

source "${CONST_LDAP_RUNTIME_DIR}"/environments

trap 'exit 1' 1 2 3 15

##########################################################
# Declare domain(DN, RDN)
# Environments:
#   LDAP_DOMAIN
# Globals:
#   _LDAP_DOMAIN_DN
#   _LDAP_DOMAIN_RDN
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __slapd_load_domain() {
  _LDAP_DOMAIN_DN=$(echo dc="${LDAP_DOMAIN}" | sed -e 's/\./,dc=/g')
  _LDAP_DOMAIN_RDN=$(echo "${LDAP_DOMAIN}" | awk -F "." '{print $1}')
}

##########################################################
# Add escape(\) before meta-character(",*,[space])
# Environments:
#   None
# Globals:
#   None
# Arguments:
#   Strings
# Returns:
#   Strings into processed meta-character
##########################################################
function __em_from_rm() {
  echo "$1" \
    | sed -e 's/\"/\\\"/g'     \
          -e 's/\*/\\\*/g'     \
          -e 's/by /\\  by /g' \
          -e 's/#/\\\#/g'
}

##########################################################
# Mod Unicode from ASCII (only "/")
# Environments:
#   None
# Globals:
#   None
# Arguments:
#   Unicode Strings
# Returns:
#   AACII Strings
##########################################################
function __ac_from_uc {
  echo "$1" \
    | sed -e 's@/@%2F@g'
}

##########################################################
# Deploy file in ${CONST_LDAP_RUNTIME_DIR}
# Environments:
#   CONST_LDAP_RUNTIME_DIR
#   CONST_LDAP_WORK_DIR
#   LDAP_MANAGER_PASS
# Globals:
#   None
# Arguments:
#   $1 (config, database, entry)
# Returns:
#   ${_deploy_file} (in ${CONST_LDAP_WORK_DIR)/${_deploy_dir}
##########################################################
function __genldif_deploy() {
  # _rmline = Raw meta character line
  # _emline = escape meta character line
  local _deploy_type="$1"
  local _read_dir

  case "${_deploy_type}" in
    config )
      _read_dir="${CONST_LDAP_RUNTIME_DIR}/config"
    ;;
    database )
      _read_dir="${CONST_LDAP_RUNTIME_DIR}/config/database"
    ;;
    entry )
      _read_dir="${CONST_LDAP_RUNTIME_DIR}/entry"
    ;;
    * )
      exit 1
    ;;
  esac

  local _deploy_dir _ldap_manager_crypt_pass
  _ldap_manager_crypt_pass=$(/usr/sbin/slappasswd -s "${LDAP_MANAGER_PASS}")
  _deploy_dir=$(mktemp -d -p "${CONST_LDAP_WORK_DIR}" --suffix="_${_deploy_type}")

  local _ldif_file _deploy_file _rmline _emline
  ls "${_read_dir}" \
    | grep ".*.ldif" \
    | while read _ldif_file; do
    _deploy_file=$(mktemp -p "${_deploy_dir}" --suffix="_${_ldif_file}")

    cat "${_read_dir}"/"${_ldif_file}" | while read _rmline; do
      _emline=$(__em_from_rm "${_rmline}")
      eval echo "${_emline}" >> "${_deploy_file}"
    done
  done
}

##########################################################
# integrate LDIF file deployed
# Environments:
#   CONST_LDAP_WORK_DIR
# Globals:
#   None
# Arguments:
#   $1 (Specify directory name part of ${CONST_LDAP_WORK_DIR})
#   $@ (Spacify file name part of ${CONST_LDAP_RUNTIME_DIR}/*.ldif
# Returns:
#   ${_integrate_file} (in ${CONST_LDAP_WORK_DIR})
##########################################################
function __genldif_integrate() {
  local _integrate_type="$1"
  local _deployed_dir _integrate_file _ldif_file _target_file

  _deployed_dir=$(ls "${CONST_LDAP_WORK_DIR}" | grep "_${_integrate_type}")
  _integrate_file=$(mktemp -p "${CONST_LDAP_WORK_DIR}" --suffix="_${_integrate_type}.ldif")

  shift 1
  local _set_args="$1"
  if [ ! -z "${_set_args}" ]; then
    _set_args="$@"
  else
    _set_args=".ldif"
  fi

  for _target_file in ${_set_args}; do
    ls "${CONST_LDAP_WORK_DIR}"/"${_deployed_dir}" \
      | sort -n -t "_" -k 2             \
      | grep "tmp.*${_target_file}" \
      | while read _ldif_file; do
      cat "${CONST_LDAP_WORK_DIR}"/"${_deployed_dir}"/"${_ldif_file}" >> "${_integrate_file}"
      echo "" >> "${_integrate_file}"
    done
  done
}

##########################################################
# join 2 LDIF file
# Environments:
#   CONST_LDAP_WORK_DIR
# Globals:
#   None
# Arguments:
#   $1 (Specify directory neme part of ${CONST_LDAP_WORK_DIR})
#   $2 (join source file)
#   $3 (join add file)
# Returns:
#   ${_result_file}
##########################################################
function __join_file() {
  local _find_dir="$1"
  local _src_file="$2"
  local _add_file="$3"
  local _found_dir _join_src_file _join_add_file _result_file

  _found_dir=$(ls "${CONST_LDAP_WORK_DIR}" | grep "_${_find_dir}")

  if [ ! -z ${_found_dir} ]; then
    _join_src_file=$(ls "${CONST_LDAP_WORK_DIR}"/"${_found_dir}" | grep "${_src_file}")
    _join_add_file=$(ls "${CONST_LDAP_WORK_DIR}"/"${_found_dir}" | grep "${_add_file}")
    _result_file=$(mktemp -p "${CONST_LDAP_WORK_DIR}")
    cat "${CONST_LDAP_WORK_DIR}"/"${_found_dir}"/"${_join_src_file}" \
        "${CONST_LDAP_WORK_DIR}"/"${_found_dir}"/"${_join_add_file}" \
      > "${_result_file}"

    mv "${_result_file}" "${CONST_LDAP_WORK_DIR}"/"${_found_dir}"/"${_join_src_file}"
    rm "${CONST_LDAP_WORK_DIR}"/"${_found_dir}"/"${_join_add_file}"
  fi
}

##########################################################
# Setting slapd URI
# Environments:
#   SLDAPD_LDAP
#   SLDAPD_LDAPI
#   SLDAPD_LDAPS
# Globals:
#   _SLAPD_LDAP_URI
#   _SLAPD_LDAPI_URI
#   _SLAPD_LDAPS_URI
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __set_slapd_uri() {
  if [ "${SLAPD_LDAP}" = "yes" ]; then
    _SLAPD_LDAP_URI="ldap://0.0.0.0:10389/"
  fi

  if [ "${SLAPD_LDAPI}" = "yes" ]; then
    # _acpath = ASCII PATH
    # _ucpath = Unicode PATH
    local _acpath _ucpath
    _ucpath="${CONST_LDAP_DATA_DIR}/ldapi"
    _acpath=$(__ac_from_uc "${_ucpath}")
    _SLAPD_LDAPI_URI="ldapi://${_acpath}/"
  fi

  if [ "${SLAPD_LDAPS}" = "yes" ]; then
    _SLAPD_LDAPS_URI="ldaps://0.0.0.0:10636/"
  fi
}

##########################################################
# Generate Certificate
# Environments:
#   CA_PEM_FILE
#   CERT_CA_CN
#   CERT_CA_O
#   CERT_CA_C
#   CERT_SV_CN
#   CONST_LDAP_CERTS_DIR
#   CONST_LDAP_NSSDB_NOISE
#   CONST_LDAP_NSSDB_PASS
#   NSSDB_CACERT_NAME
#   NSSDB_CERT_NAME
#   NSSDB_PASSWORD
#   NSSDB_PREFIX
#   SERVER_PEM_FILE
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __gencert_selfsigned() {
  # Create noise File
  dd if=/dev/urandom bs=32 count=1 2> /dev/null | base64 \
    > "${CONST_LDAP_NSSDB_NOISE}"

  # Create password File
  echo "${NSSDB_PASSWORD}" > "${CONST_LDAP_NSSDB_PASS}"

  if [ ! -s "${CONST_LDAP_CERTS_DIR}/${NSSDB_PREFIX}key3.db" ] && \
     [ ! -s "${CONST_LDAP_CERTS_DIR}/${NSSDB_PREFIX}cert8.db" ]; then

    # Create New Key Databases
    certutil -N \
      -d "${CONST_LDAP_CERTS_DIR}"  \
      -f "${CONST_LDAP_NSSDB_PASS}" \
      -P "${NSSDB_PREFIX}"
  fi

  certutil -L \
    -d "${CONST_LDAP_CERTS_DIR}" \
    -n "${NSSDB_CACERT_NAME}"    \
    -P "${NSSDB_PREFIX}"         \
    > /dev/null 2>&1

  local _cert_status="$?"

  if [ "${_cert_status}" -ne 0 ]; then
    # Create New CA Certicicate (Self Signed)
    certutil -S -x                   \
      -d "${CONST_LDAP_CERTS_DIR}"   \
      -f "${CONST_LDAP_NSSDB_PASS}"  \
      -z "${CONST_LDAP_NSSDB_NOISE}" \
      -n "${NSSDB_CACERT_NAME}"      \
      -s "CN=${CERT_CA_CN}, O=${CERT_CA_O}, C=${CERT_CA_C}" \
      -t "CT,,"                \
      -k "rsa"                 \
      -Z "SHA512"              \
      -g "4096"                \
      -v "120"                 \
      -P "${NSSDB_PREFIX}"
  fi

  certutil -L \
    -d "${CONST_LDAP_CERTS_DIR}" \
    -n "${NSSDB_CERT_NAME}"      \
    -P "${NSSDB_PREFIX}"         \
    > /dev/null 2>&1

  local _cert_status="$?"

  if [ "${_cert_status}" -ne 0 ]; then
    # Create New Certificate Signed CA
    certutil -S                      \
      -d "${CONST_LDAP_CERTS_DIR}"   \
      -f "${CONST_LDAP_NSSDB_PASS}"  \
      -z "${CONST_LDAP_NSSDB_NOISE}" \
      -c "${NSSDB_CACERT_NAME}"      \
      -n "${NSSDB_CERT_NAME}"  \
      -s "CN=${CERT_SV_CN}"    \
      -t ",,"                  \
      -k "rsa"                 \
      -Z "SHA512"              \
      -g "4096"                \
      -v "120"                 \
      -8 "${CERT_SV_CN},localhost,localhost.localdomain" \
      -P "${NSSDB_PREFIX}"
  fi

  if [ ! -s "${CONST_LDAP_CERTS_DIR}/${CA_PEM_FILE}" ]; then
    certutil -L                      \
      -d "${CONST_LDAP_CERTS_DIR}"   \
      -f "${CONST_LDAP_NSSDB_PASS}"  \
      -n "${NSSDB_CACERT_NAME}"      \
      -P "${NSSDB_PREFIX}"           \
      -a > "${CONST_LDAP_CERTS_DIR}/${CA_PEM_FILE}"
  fi

  if [ ! -s "${CONST_LDAP_CERTS_DIR}/${SERVER_PEM_FILE}" ]; then
    certutil -L                      \
      -d "${CONST_LDAP_CERTS_DIR}"   \
      -f "${CONST_LDAP_NSSDB_PASS}"  \
      -n "${NSSDB_CERT_NAME}"        \
      -P "${NSSDB_PREFIX}"           \
      -a > "${CONST_LDAP_CERTS_DIR}/${SERVER_PEM_FILE}"
  fi
}

##########################################################
# Choose using database from ${LDAP_DATABASE}
# Environments:
#   LDAP_DATABASE
# Globals:
#   _USE_DATABASE
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __choose_database() {
  case "${LDAP_DATABASE}" in
    mdb )
      _USE_DATABASE="mdb.ldif"
    ;;
    bdb )
      _USE_DATABASE="bdb.ldif"
    ;;
    * )
      echo "${LDAP_DATABASE} is none" >&2
    ;;
  esac
}

##########################################################
# Deploy LDIF file
# Environments:
#   CONST_LDAP_RUNTIME_DIR
#   CONST_LDAP_WORK_DIR
#   LDAP_DATABASE
#   SLAPD_LDAPS
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __slapd_deploy() {
  if [ ! -d "${CONST_LDAP_BACKUP_DIR}" ]; then
    mkdir "${CONST_LDAP_BACKUP_DIR}"
  fi

  if [ ! -d "${CONST_LDAP_CERTS_DIR}" ]; then
    mkdir "${CONST_LDAP_CERTS_DIR}"
  fi

  if [ ! -d "${CONST_LDAP_CONFIG_DIR}" ]; then
    mkdir "${CONST_LDAP_CONFIG_DIR}"
  fi

  if [ ! -d "${CONST_LDAP_DBDATA_DIR}" ]; then
    mkdir "${CONST_LDAP_DBDATA_DIR}"
  fi

  __choose_database

  __genldif_deploy config
  __genldif_deploy database
  __genldif_deploy entry

  if [ "${SLAPD_LDAPS}" = "yes" ]; then
    __join_file config 10-global.ldif 11-global-tls.ldif
    __gencert_selfsigned
  fi

  __genldif_integrate config 10-global.ldif 20-schema.ldif 30-frontend.ldif 40-config.ldif 50-monitor.ldif
  __genldif_integrate database "${_USE_DATABASE}"
  __genldif_integrate entry

  __set_slapd_uri

  local _tmp_config_ldif _tmp_database_ldif _tmp_entry_ldif
  _tmp_config_ldif=$(ls "${CONST_LDAP_WORK_DIR}" | grep "_config.ldif")
  _tmp_database_ldif=$(ls "${CONST_LDAP_WORK_DIR}" | grep "_database.ldif")
  cat "${CONST_LDAP_WORK_DIR}/${_tmp_config_ldif}"   \
      "${CONST_LDAP_WORK_DIR}/${_tmp_database_ldif}" \
    > "${CONST_LDAP_WORK_DIR}/config.ldif"

  _tmp_entry_ldif=$(ls "${CONST_LDAP_WORK_DIR}" | grep "_entry.ldif")
  cat "${CONST_LDAP_WORK_DIR}/${_tmp_entry_ldif}" \
    > "${CONST_LDAP_WORK_DIR}/entry.ldif"
}

##########################################################
# Install LDIF file
# Environments:
#   CONST_LDAP_CONFIG_DIR
#   CONST_LDAP_DBDATA_DIR
#   CONST_LDAP_WORK_DIR
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __slapd_install() {
  if [ ! -e "${CONST_LDAP_CONFIG_DIR}/.slapd_installed" ]; then
    slapadd -v -F "${CONST_LDAP_CONFIG_DIR}" \
      -n 0 -l "${CONST_LDAP_WORK_DIR}/config.ldif"

    cat "${CONST_LDAP_WORK_DIR}/config.ldif" \
      | grep "^#"        \
      | awk '{print $2}' \
      > "${CONST_LDAP_CONFIG_DIR}/.slapd_installed"

    slapadd -v -F "${CONST_LDAP_CONFIG_DIR}" \
      -n 2 -l "${CONST_LDAP_WORK_DIR}/entry.ldif"

    cat "${CONST_LDAP_WORK_DIR}/entry.ldif" \
      | grep "^#"        \
      | awk '{print $2}' \
      >> "${CONST_LDAP_CONFIG_DIR}/.slapd_installed"
  fi
}

##########################################################
# check exist cert and slapd config test
# Environments:
#   CONST_LDAP_CERTS_DIR
#   CONST_LDAP_CONFIG_DIR
#   NSSDB_CACERT_NAME
#   NSSDB_CERT_NAME
#   SLAPD_LDAPS
#   NSSDB_PREFIX
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __slapd_test() {
  if [ "${SLAPD_LDAPS}" = "yes" ]; then
    certutil -L \
      -d "${CONST_LDAP_CERTS_DIR}" \
      -n "${NSSDB_CACERT_NAME}"    \
      -P "${NSSDB_PREFIX}"         \
      > /dev/null 2>&1
    local _cacert_status="$?"

    certutil -L \
      -d "${CONST_LDAP_CERTS_DIR}" \
      -n "${NSSDB_CERT_NAME}"      \
      -P "${NSSDB_PREFIX}"         \
      > /dev/null 2>&1
    local _svcert_status="$?"
  fi

  slaptest -F "${CONST_LDAP_CONFIG_DIR}" -Q 2> /dev/null
  local _slapd_status="$?"

  if [ "${_cacert_status:-0}" -ne "0" ]; then
    echo -en "[\e[31m Error\e[m ] " >&2
    certutil -L \
      -d "${CONST_LDAP_CERTS_DIR}" \
      -n "${NSSDB_CACERT_NAME}"    \
      -P "${NSSDB_PREFIX}"         \

    exit "${_cacert_status}"
  fi

  if [ "${_svcert_status:-0}" -ne "0" ]; then
    echo -en "[\e[31m Error\e[m ] " >&2
    certutil -L \
      -d "${CONST_LDAP_CERTS_DIR}" \
      -n "${NSSDB_CERT_NAME}"      \
      -P "${NSSDB_PREFIX}"

    exit "${_svcert_status}"
  fi

  if [ "${_slapd_status}" -ne "0" ]; then
    echo -e "[\e[31m Error\e[m ] Failed to slapd config test" >&2
    slaptest -F "${CONST_LDAP_CONFIG_DIR}" -d 4

    exit "${_slapd_status}"
  fi
}

##########################################################
# Remove temporary files
# Environments:
#   CONST_LDAP_WORK_DIR
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __slapd_cleanup() {
  rm -rf "${CONST_LDAP_WORK_DIR}"/tmp.*
}

##########################################################
# Backup slapd config and database
# Environments:
#   CONST_LDAP_BACKUP_DIR
#   CONST_LDAP_CONFIG_DIR
#   CONST_LDAP_DBDATA_DIR
#   LDAP_DATABASE
# Globals:
#   None
# Arguments:
#   Backup target
# Returns:
#   None
##########################################################
function __slapd_backup() {
  if [ ! -z "$1" ]; then
    if [ ! -d "${CONST_LDAP_BACKUP_DIR}" ]; then
      mkdir "${CONST_LDAP_BACKUP_DIR}"
    fi

    case "$1" in
      config )
        slapcat -F "${CONST_LDAP_CONFIG_DIR}" -n 0 \
          -l "${CONST_LDAP_BACKUP_DIR}/slapd_config.ldif"
        slapcat -F ${CONST_LDAP_CONFIG_DIR} -n 2 \
          -l "${CONST_LDAP_BACKUP_DIR}/slapd_data.ldif"
      ;;
      dbdata )
        case "${LDAP_DATABASE}" in
         mdb )
           mdb_copy "${CONST_LDAP_DBDATA_DIR}" "${CONST_LDAP_BACKUP_DIR}"
         ;;
         bdb )
           db_hotbackup -Dc -h "${CONST_LDAP_DBDATA_DIR}" -b "${CONST_LDAP_BACKUP_DIR}"
           db_verify -h "${CONST_LDAP_DBDATA_DIR}" $(ls ${CONST_LDAP_BACKUP_DIR}/*.bdb)
         ;;
         * )
           echo "${LDAP_DATABASE} is none" >&2
         ;;
        esac
      ;;
      * )
        echo "Invalid argument $1" >&2
      ;;
    esac
  fi
}

##########################################################
# PID check slapd
# Environments:
#   CONST_LDAP_WORK_DIR
# Globals:
#   _PID
#   _PID_FILE
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __slapd_call_pid() {
  _PID_FILE="${CONST_LDAP_WORK_DIR}/slapd.pid"

  if [ -s "${_PID_FILE}" ]; then
    _PID=$(cat "${_PID_FILE}")
  fi

  _PID="${_PID:-noproc}"
}

##########################################################
# Start slapd
# Environments:
#   CONST_LDAP_CONFIG_DIR
#   SLAPD_DEBUG_LEVEL
# Globals:
#   _PID
#   _SLAPD_LDAP_URI
#   _SLAPD_LDAPI_URI
#   _SLAPD_LDAPS_URI
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __slapd_start() {
  __slapd_call_pid

  if [ "${_PID}" = "noproc" ]; then
    exec /usr/sbin/slapd -d "${SLAPD_DEBUG_LEVEL}" \
      -h "${_SLAPD_LDAP_URI} ${_SLAPD_LDAPI_URI} ${_SLAPD_LDAPS_URI}" \
      -F "${CONST_LDAP_CONFIG_DIR}" \
      -u ldap
  fi
}

##########################################################
# Stop slapd
# Environments:
#   None
# Globals:
#   _PID
#   _PID_FILE
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __slapd_stop() {
  __slapd_call_pid

  if [ "${_PID}" != "noproc" ]; then
    kill -INT "${_PID}"
    rm "${_PID_FILE}"
  fi
}

##########################################################
# Current status check slapd
# Environments:
#   None
# Globals:
#   _PID
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __slapd_status() {
  __slapd_call_pid

  if [ "${_PID}" != "noproc" ]; then
    echo "running slapd... [Pid: ${_PID}]"
  else
    echo "stopping slapd..."
  fi
}
