#!/bin/bash
#
# functions for entrypoint.sh

source ${CONST_LDAP_RUNTIME_DIR}/environments

trap 'exit 1' 1 2 3 15

##########################################################
# Declare domain(DN, RDN)
# Environments:
#   LDAP_DOMAIN
#   LDAP_MANAGER_DOMAIN
# Globals:
#   _LDAP_DOMAIN_DN
#   _LDAP_DOMAIN_RDN
#   _LDAP_MANAGER_DOMAIN
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __slapd_load_domain() {
  _LDAP_DOMAIN_DN=$(echo dc=${LDAP_DOMAIN} | sed -e 's/\./,dc=/g')
  _LDAP_DOMAIN_RDN=$(echo ${LDAP_DOMAIN} | awk -F "." '{print $1}')
  _LDAP_MANAGER_DOMAIN=$(echo dc=${LDAP_MANAGER_DOMAIN} | sed -e 's/\./,dc=/g')
}

##########################################################
# Add escape(\) before meta-character(",*,[space])
# Environments:
#   None
# Globals:
#   None
# Arguments:
#   Strings
# Returns:
#   Strings into processed meta-character
##########################################################
function __em_from_rm() {
  echo "$1" \
    | sed -e 's/\"/\\\"/g'     \
          -e 's/\*/\\\*/g'     \
          -e 's/by /\\  by /g'
}

##########################################################
# Mod Unicode from ASCII (only "/")
# Environments:
#   None
# Globals:
#   None
# Arguments:
#   Unicode Strings
# Returns:
#   AACII Strings
##########################################################
function __ac_from_uc {
  echo "$1" \
    | sed -e 's@/@%2F@g'
}

##########################################################
# Generate initialize LDIF file
# Environments:
#   CONST_LDAP_RUNTIME_DIR
#   CONST_LDAP_WORK_DIR
#   LDAP_MANAGER_PASS
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __genldif_install() {
# _rmline = Raw meta character line
# _emline = escape meta character line
  local _rmline _emline _ldap_manager_crypt_pass
  _ldap_manager_crypt_pass=$(/usr/sbin/slappasswd -s ${LDAP_MANAGER_PASS})

  cat ${CONST_LDAP_RUNTIME_DIR}/config/[0-8][0-9]*.ldif | while read _rmline; do
    _emline=$(__em_from_rm "${_rmline}")
    eval echo "${_emline}" >> ${CONST_LDAP_WORK_DIR}/tmp_config.ldif
  done
}

##########################################################
# Generate database LDIF file
# Environments:
#   CONST_LDAP_RUNTIME_DIR
#   CONST_LDAP_WORK_DIR
#   LDAP_DATABASE
#   LDAP_MANAGER_PASS
# Globals:
#   _USE_DATABASE
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __genldif_database() {
# _rmline = Raw meta character line
# _emline = escape meta character line
  local _rm_line _emline _ldap_manager_crypt_pass
  _ldap_manager_crypt_pass=$(/usr/sbin/slappasswd -s ${LDAP_MANAGER_PASS})

  cat ${CONST_LDAP_RUNTIME_DIR}/config/database/${_USE_DATABASE} | while read _rmline; do
    _emline=$(__em_from_rm "${_rmline}")
    eval echo "${_emline}" >> ${CONST_LDAP_WORK_DIR}/tmp_${LDAP_DATABASE}.ldif
  done
}

##########################################################
# Generate base entry LDIF file
# Environments:
#   CONST_LDAP_RUNTIME_DIR
#   CONST_LDAP_WORK_DIR
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __genldif_baseentry() {
# _rmline = Raw meta character line
# _emline = escape meta character line
  local _rmline _emline

  cat ${CONST_LDAP_RUNTIME_DIR}/config/entry/*.ldif | while read _rmline; do
    _emline=$(__em_from_rm "${_rmline}") 
    eval echo "${_emline}" >> ${CONST_LDAP_WORK_DIR}/entry.ldif
  done
}

##########################################################
# Setting slapd URI
# Environments:
#   SLDAPD_LDAP
#   SLDAPD_LDAPI
#   SLDAPD_LDAPS
# Globals:
#   _SLAPD_LDAP_URI
#   _SLAPD_LDAPI_URI
#   _SLAPD_LDAPS_URI
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __set_slapd_uri() {
  if [ "${SLAPD_LDAP}" = "yes" ]; then
    _SLAPD_LDAP_URI="ldap://0.0.0.0:10389/"
  fi

  if [ "${SLAPD_LDAPI}" = "yes" ]; then
    # _acpath = ASCII PATH
    # _ucpath = Unicode PATH
    local _acpath _ucpath
    _ucpath="${CONST_LDAP_DATA_DIR}/ldapi"
    _acpath=$(__ac_from_uc "${_ucpath}")
    _SLAPD_LDAPI_URI="ldapi://${_acpath}/"
  fi

  if [ "${SLAPD_LDAPS}" = "yes" ]; then
    _SLAPD_LDAPS_URI="ldaps://0.0.0.0:10636/"
  fi
}

##########################################################
# Join 2 LDIF files
# Environments:
#   CONST_LDAP_WORK_DIR
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __join_ldif() {
  local _src_ldif="$1"
  local _add_ldif="$2"

  if [ $# -ne 2 ]; then
    if [ ! -s ${_src_ldif} -o ! -s ${_add_ldif} ]; then
      return 1
    fi
  fi

  sed -i -e '/^$/d' ${_src_ldif}

  cat ${_src_ldif} ${_add_ldif} > ${CONST_LDAP_WORK_DIR}/tmp_swap.ldif

  mv ${CONST_LDAP_WORK_DIR}/tmp_swap.ldif ${_src_ldif}
}

##########################################################
# Generate Certificate
# Environments:
#   CA_PEM_FILE
#   CONST_LDAP_CERTS_DIR
#   CONST_LDAP_NSSDB_NOISE
#   CONST_LDAP_NSSDB_PASS
#   CONST_LDAP_NSSDB_SECMOD
#   NSSDB_CACERT_NAME
#   NSSDB_CERT_NAME
#   NSSDB_PASSWORD
#   NSSDB_PREFIX
#   SERVER_PEM_FILE
#   SSL_HOSTNAME
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __gencert_selfsigned() {
  if [ ! -z ${NSSDB_PREFIX} ]; then
    local _dbfile_prefix
    readonly _dbfile_prefix="-P ${NSSDB_PREFIX}"
  fi

  # Create noise File
  dd if=/dev/urandom bs=32 count=1 2> /dev/null | base64 \
    > ${CONST_LDAP_NSSDB_NOISE}

  # Create password File
  echo ${NSSDB_PASSWORD} > ${CONST_LDAP_NSSDB_PASS}

  if [ ! -s "${CONST_LDAP_CERTS_DIR}/${NSSDB_PREFIX}key3.db" ] && \
     [ ! -s "${CONST_LDAP_CERTS_DIR}/${NSSDB_PREFIX}/${NSSDB_PREFIX}cert8.db" ] && \
     [ ! -s "${CONST_LDAP_NSSDB_SECMOD}" ]; then
    # Create New Key Databases
    certutil -N   \
      -d "${CONST_LDAP_CERTS_DIR}"   \
      -f "${CONST_LDAP_NSSDB_PASS}"  \
      ${_dbfile_prefix}
  fi

  certutil -L -d ${CONST_LDAP_CERTS_DIR} -n "${NSSDB_CACERT_NAME}" > /dev/null 2>&1
  local _cert_status=$?

  if [ ${_cert_status} -ne 0 ]; then
    # Create New CA Certicicate (Self Signed)
    certutil -S -x                   \
      -d "${CONST_LDAP_CERTS_DIR}"   \
      -f "${CONST_LDAP_NSSDB_PASS}"  \
      -z "${CONST_LDAP_NSSDB_NOISE}" \
      -n "${NSSDB_CACERT_NAME}"      \
      -s "CN=CAcert"           \
      -t "CT,,"                \
      -k "rsa"                 \
      -Z "SHA512"              \
      -g "4096"                \
      -v "120"                 \
      ${_dbfile_prefix}
  fi

  certutil -L -d ${CONST_LDAP_CERTS_DIR} -n "${NSSDB_CERT_NAME}" > /dev/null 2>&1
  local _cert_status=$?

  if  [ ${_cert_status} -ne 0 ]; then
    # Create New Certificate Signed CA
    certutil -S                      \
      -d "${CONST_LDAP_CERTS_DIR}"   \
      -f "${CONST_LDAP_NSSDB_PASS}"  \
      -z "${CONST_LDAP_NSSDB_NOISE}" \
      -c "${NSSDB_CACERT_NAME}"      \
      -n "${NSSDB_CERT_NAME}"  \
      -s "CN=${SSL_HOSTNAME}"  \
      -t ",,"                  \
      -k "rsa"                 \
      -Z "SHA512"              \
      -g "4096"                \
      -v "120"                 \
      -8 "${SSL_HOSTNAME},localhost,localhost.localdomain" \
      ${_dbfile_prefix}
  fi

  if [ ! -s ${CONST_LDAP_CERTS_DIR}/${CA_PEM_FILE} ]; then
    certutil -L                      \
      -d "${CONST_LDAP_CERTS_DIR}"   \
      -f "${CONST_LDAP_NSSDB_PASS}"  \
      -n "${NSSDB_CACERT_NAME}"      \
      ${_dbfile_prefix}              \
      -a > ${CONST_LDAP_CERTS_DIR}/${CA_PEM_FILE}
  fi

  if [ ! -s ${CONST_LDAP_CERTS_DIR}/${SERVER_PEM_FILE} ]; then
    certutil -L                      \
      -d "${CONST_LDAP_CERTS_DIR}"   \
      -f "${CONST_LDAP_NSSDB_PASS}"  \
      -n "${NSSDB_CERT_NAME}"        \
      ${_dbfile_prefix}              \
      -a > ${CONST_LDAP_CERTS_DIR}/${SERVER_PEM_FILE}
  fi
}

##########################################################
# Choose using database from ${LDAP_DATABASE}
# Environments:
#   LDAP_DATABASE
# Globals:
#   _USE_DATABASE
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __choose_database() {
  case ${LDAP_DATABASE} in
    mdb )
      _USE_DATABASE="mdb.ldif"
    ;;
    bdb )
      _USE_DATABASE="bdb.ldif"
    ;;
    * )
      echo "${LDAP_DATABASE} is none" >&2
    ;;
  esac
}

##########################################################
# Backup slapd config and database
# Environments:
#   CONST_LDAP_BACKUP_DIR
#   CONST_LDAP_CONFIG_DIR
#   CONST_LDAP_DBDATA_DIR
#   LDAP_DATABASE
# Globals:
#   None
# Arguments:
#   Backup target
# Returns:
#   None
##########################################################
function __slapd_backup() {
  if [ ! -z $1 ]; then
    if [ ! -d ${CONST_LDAP_BACKUP_DIR} ]; then
      mkdir ${CONST_LDAP_BACKUP_DIR}
    fi

    case $1 in
      config )
        slapcat -F ${CONST_LDAP_CONFIG_DIR} -n 0 \
          -l ${CONST_LDAP_BACKUP_DIR}/slapd_config.ldif
        slapcat -F ${CONST_LDAP_CONFIG_DIR} \
          -l ${CONST_LDAP_BACKUP_DIR}/slapd_data.ldif
      ;;
      dbdata )
        case ${LDAP_DATABASE} in
         mdb )
           mdb_copy ${CONST_LDAP_DBDATA_DIR} ${CONST_LDAP_BACKUP_DIR}
         ;;
         bdb )
           db_hotbackup -Dc -h ${CONST_LDAP_DBDATA_DIR} -b ${CONST_LDAP_BACKUP_DIR}
           db_verify -h ${CONST_LDAP_DBDATA_DIR} $(ls ${CONST_LDAP_BACKUP_DIR}/*.bdb)
         ;;
         * )
           echo "${LDAP_DATABASE} is none" >&2
         ;;
        esac
      ;;
      * )
        echo "Invalid argument $1" >&2
      ;;
    esac
  fi
}

##########################################################
# Deploy LDIF file
# Environments:
#   CONST_LDAP_RUNTIME_DIR
#   CONST_LDAP_WORK_DIR
#   LDAP_DATABASE
#   SLAPD_LDAPS
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __slapd_deploy() {
  if [ ! -d "${CONST_LDAP_BACKUP_DIR}" ] && \
     [ ! -d "${CONST_LDAP_CERTS_DIR}" ] && \
     [ ! -d "${CONST_LDAP_CONFIG_DIR}" ] && \
     [ ! -d "${CONST_LDAP_DBDATA_DIR}" ]; then
    mkdir ${CONST_LDAP_BACKUP_DIR} ${CONST_LDAP_CERTS_DIR} \
          ${CONST_LDAP_CONFIG_DIR} ${CONST_LDAP_DBDATA_DIR}
  fi
  if [ "${SLAPD_LDAPS}" = "yes" ]; then
    __join_ldif ${CONST_LDAP_RUNTIME_DIR}/config/10-global.ldif \
                ${CONST_LDAP_RUNTIME_DIR}/config/99-tls.ldif

    __gencert_selfsigned
  fi

  __choose_database
  __genldif_install
  __genldif_database
  __genldif_baseentry

  __set_slapd_uri

  cat ${CONST_LDAP_WORK_DIR}/tmp_config.ldif            \
      ${CONST_LDAP_WORK_DIR}/tmp_${LDAP_DATABASE}.ldif  \
    > ${CONST_LDAP_WORK_DIR}/config.ldif
}

##########################################################
# Install LDIF file
# Environments:
#   CONST_LDAP_CONFIG_DIR
#   CONST_LDAP_DBDATA_DIR
#   CONST_LDAP_WORK_DIR
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __slapd_install() {
  if [ ! -e ${CONST_LDAP_CONFIG_DIR}/.slapd_installed ]; then
    slapadd -v -F ${CONST_LDAP_CONFIG_DIR} \
      -n 0 -l ${CONST_LDAP_WORK_DIR}/config.ldif
    slapadd -v -F ${CONST_LDAP_CONFIG_DIR} \
      -n 2 -l ${CONST_LDAP_WORK_DIR}/entry.ldif

    touch ${CONST_LDAP_CONFIG_DIR}/.slapd_installed
  fi
}

##########################################################
# Remove temporary files
# Environments:
#   CONST_LDAP_WORK_DIR
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __slapd_cleanup() {
  rm -rf ${CONST_LDAP_WORK_DIR}/tmp_*
}

##########################################################
# PID check slapd
# Environments:
#   CONST_LDAP_WORK_DIR
# Globals:
#   _PID
#   _PID_FILE
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __slapd_call_pid() {
  _PID_FILE="${CONST_LDAP_WORK_DIR}/slapd.pid"

  if [ -s ${_PID_FILE} ]; then
    _PID=$(cat ${_PID_FILE})
  fi

  _PID=${_PID:-noproc}
}

##########################################################
# Start slapd
# Environments:
#   CONST_LDAP_CONFIG_DIR
#   SLAPD_DEBUG_LEVEL
# Globals:
#   _PID
#   _SLAPD_LDAP_URI
#   _SLAPD_LDAPI_URI
#   _SLAPD_LDAPS_URI
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __slapd_start() {
  __slapd_call_pid

  if [ "noproc" = "${_PID}" ]; then
    exec /usr/sbin/slapd -d ${SLAPD_DEBUG_LEVEL} \
      -h "${_SLAPD_LDAP_URI} ${_SLAPD_LDAPI_URI} ${_SLAPD_LDAPS_URI}" \
      -F ${CONST_LDAP_CONFIG_DIR} \
      -u ldap
  fi
}

##########################################################
# Stop slapd
# Environments:
#   None
# Globals:
#   _PID
#   _PID_FILE
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __slapd_stop() {
  __slapd_call_pid

  if [ "noproc" != "${_PID}" ]; then
    kill -INT ${_PID}
    rm ${_PID_FILE}
  fi
}

##########################################################
# Current status check slapd
# Environments:
#   None
# Globals:
#   _PID
# Arguments:
#   None
# Returns:
#   None
##########################################################
function __slapd_status() {
  __slapd_call_pid

  if [ "noproc" != "${_PID}" ]; then
    echo "running slapd... [Pid: ${_PID}]"
  else
    echo "stopping slapd..."
  fi
}
