#!/bin/bash
# functions for entrypoint.sh 

source ${LDAP_RUNTIME_DIR}/environments

function __slapd_load_domain() {
  _LDAP_DOMAIN_DN=$(echo dc=${LDAP_DOMAIN} | sed -e 's/\./,dc=/g')
  _LDAP_DOMAIN_RDN=$(echo ${LDAP_DOMAIN} | awk -F "." '{print $1}')
  _LDAP_MANAGER_DOMAIN=$(echo dc=${LDAP_MANAGER_DOMAIN} | sed -e 's/\./,dc=/g')
}

function __mkldif_global() {
  cat << EOF > ${LDAP_WORK_DIR}/tmp_global.ldif
dn: cn=config
objectClass: olcGlobal
cn: config
olcArgsFile: /var/run/openldap/slapd.args
olcPidFile: /var/run/openldap/slapd.pid
olcAllows: bind_v2
olcAttributeOptions: lang-
olcAuthzPolicy: none
olcConcurrency: 0
olcConnMaxPending: 100
olcConnMaxPendingAuth: 1000
olcGentleHUP: FALSE
olcIdleTimeout: 0
olcIndexSubstrIfMaxLen: 4
olcIndexSubstrIfMinLen: 2
olcIndexSubstrAnyLen: 4
olcIndexSubstrAnyStep: 2
olcIndexIntLen: 4
olcListenerThreads: 1
olcLocalSSF: 71
olcLogLevel: 0
olcReadOnly: FALSE
olcReverseLookup: FALSE
olcSaslSecProps: noplain,noanonymous
olcSockbufMaxIncoming: 262143
olcSockbufMaxIncomingAuth: 16777215

EOF
}

function __mkldif_schema() {
  cat << EOF > ${LDAP_WORK_DIR}/tmp_schema.ldif
dn: cn=schema,cn=config
objectClass: olcSchemaConfig
cn: schema

include: file:///etc/openldap/schema/corba.ldif
include: file:///etc/openldap/schema/core.ldif
include: file:///etc/openldap/schema/cosine.ldif
include: file:///etc/openldap/schema/inetorgperson.ldif
include: file:///etc/openldap/schema/nis.ldif
include: file:///etc/openldap/schema/openldap.ldif

EOF
}

function __mkldif_frontend() {
  cat << EOF > ${LDAP_WORK_DIR}/tmp_frontend.ldif
dn: olcDatabase=frontend,cn=config
objectClass: olcDatabaseConfig
objectClass: olcFrontendConfig
olcDatabase: frontend
olcAddContentAcl: FALSE
olcLastMod: TRUE
olcMaxDerefDepth: 0
olcReadOnly: FALSE
olcSchemaDN: cn=Subschema
olcSyncUseSubentry: FALSE
olcMonitoring: FALSE

EOF
}

function __mkldif_config() {
  local LDAP_MANAGER_PASS_CRYPT=$(/usr/sbin/slappasswd -s ${LDAP_MANAGER_PASS})

  cat << EOF > ${LDAP_WORK_DIR}/tmp_config.ldif
dn: olcDatabase=config,cn=config
objectClass: olcDatabaseConfig
olcDatabase: config
olcAccess: to *
  by dn.base="gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth" manage
  by * none
olcAddContentAcl: TRUE
olcLastMod: TRUE
olcMaxDerefDepth: 15
olcReadOnly: FALSE
olcRootDN: cn=config
olcRootPW: ${LDAP_MANAGER_PASS_CRYPT}
olcSyncUseSubentry: FALSE
olcMonitoring: FALSE

EOF
}

function __mkldif_monitor() {
  cat << EOF > ${LDAP_WORK_DIR}/tmp_monitor.ldif
dn: olcDatabase=monitor,cn=config
objectClass: olcDatabaseConfig
olcDatabase: monitor
olcAccess: to *
  by dn.base="gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth" read
  by dn.base="cn=${LDAP_MANAGER_NAME},${_LDAP_MANAGER_DOMAIN}" read
  by * none
olcAddContentAcl: FALSE
olcLastMod: TRUE
olcMaxDerefDepth: 15
olcReadOnly: FALSE
olcSyncUseSubentry: FALSE
olcMonitoring: FALSE

EOF
}

function __mkldif_mdb() {
  local LDAP_MANAGER_PASS_CRYPT=$(/usr/sbin/slappasswd -s ${LDAP_MANAGER_PASS})

  cat << EOF > ${LDAP_WORK_DIR}/tmp_mdb.ldif
dn: olcDatabase=mdb,cn=config
objectClass: olcDatabaseConfig
objectClass: olcMdbConfig
olcDatabase: mdb
olcReadOnly: FALSE
olcAddContentAcl: FALSE
olcLastMod: TRUE
olcMaxDerefDepth: 15
olcMonitoring: TRUE
olcRootDN: cn=${LDAP_MANAGER_NAME},${_LDAP_MANAGER_DOMAIN}
olcRootPW: ${LDAP_MANAGER_PASS_CRYPT}
olcSuffix: ${_LDAP_MANAGER_DOMAIN}
olcSyncUseSubentry: FALSE
olcDbCheckpoint: 1024 15
olcDbNoSync: FALSE
olcDbDirectory: ${LDAP_DBDATA_DIR}
olcDbMode: 0600
olcDbSearchStack: 16
olcDbIndex: objectClass pres,eq
olcDbIndex: cn pres,eq,sub
olcDbIndex: uid pres,eq,sub
olcDbIndex: uidNumber pres,eq
olcDbIndex: gidNumber pres,eq
olcDbIndex: mail pres,eq,sub
olcDbIndex: ou pres,eq,sub
olcDbIndex: sn pres,eq,sub
olcDbIndex: givenName pres,eq,sub
olcDbIndex: loginShell pres,eq
olcDbIndex: memberUid pres,eq,sub
olcDbIndex: nisMapName pres,eq,sub
olcDbIndex: nisMapEntry pres,eq,sub

EOF
}

function __mkldif_tls() {
  cat << EOF > ${LDAP_WORK_DIR}/tmp_tls.ldif
olcTLSCACertificatePath: ${LDAP_CERTS_DIR}
olcTLSCACertificateFile: ${LDAP_CERTS_DIR}/${CA_PEM_FILE}
olcTLSCertificateFile: "${NSSDB_CERT_NAME}"
olcTLSCertificateKeyFile: ${LDAP_CERTS_DIR}/password
olcTLSCRLCheck: none
olcTLSVerifyClient: never
olcTLSProtocolMin: 3.2

EOF
}

function __mkldif_base_domain() {
  cat << EOF > ${LDAP_WORK_DIR}/tmp_base_domain.ldif
dn: ${_LDAP_DOMAIN_DN}
objectClass: dcObject
objectClass: organization
dc: ${_LDAP_DOMAIN_RDN}
o: ${LDAP_ORGNAME}
description: ${LDAP_ORGNAME_DESC}

EOF
}

function __mkldif_unit_user() {
  cat << EOF > ${LDAP_WORK_DIR}/tmp_unit_user.ldif
dn: ou=${LDAP_PEOPLE},${_LDAP_DOMAIN_DN}
objectClass: organizationalUnit
ou: ${LDAP_PEOPLE}
description: ${LDAP_PEOPLE_DESC}

EOF
}

function __mkldif_unit_group() {
  cat << EOF > ${LDAP_WORK_DIR}/tmp_unit_group.ldif
dn: ou=${LDAP_GROUP},${_LDAP_DOMAIN_DN}
objectClass: organizationalUnit
ou: ${LDAP_GROUP}
description: ${LDAP_GROUP_DESC}

EOF
}

function __switch_user() {
  local _exec_cmd="$1"
  shift 1
  local _exec_option="$@"

  runuser -m -s ${_exec_cmd} -- ldap ${_exec_option}
}

function __set_slapd_uri() {
  if [ "${SLAPD_LDAP}" = "yes" ]; then
    _SLAPD_LDAP_ARGS="ldap:///"
  fi

  if [ "${SLAPD_LDAPI}" = "yes" ]; then
    _SLAPD_LDAPI_ARGS="ldapi:///"
  fi

  if [ "${SLAPD_LDAPS}" = "yes" ]; then
    _SLAPD_LDAPS_ARGS="ldaps:///"
    __join_ldif ${LDAP_WORK_DIR}/tmp_global.ldif \
                ${LDAP_WORK_DIR}/tmp_tls.ldif
  fi
}

function __join_ldif() {
  local _src_ldif="$1"
  local _add_ldif="$2"

  if [ $# -ne 2 ]; then
    if [ ! -s ${_src_ldif} -o ! -s ${_add_ldif} ]; then
      return 1
    fi
  fi

  sed -i -e '/^$/d' ${_src_ldif}

  cat ${_src_ldif} ${_add_ldif} > ${LDAP_WORK_DIR}/tmp_swap.ldif

  mv ${LDAP_WORK_DIR}/tmp_swap.ldif ${_src_ldif}
  rm ${_add_ldif}
}

function __mkcert_selfsigned() {
  if [ "${MAKE_SELFSIGNED_CERTIFICATE}" = "yes" ]; then

set -x

    if [ ! -s "${LDAP_NSSDB_KEY}" -a ! -s ${LDAP_NSSDB_CERT} -a ! -s ${LDAP_NSSDB_SECMOD} ]; then
      dd if=/dev/urandom bs=32 count=1 2> /dev/null | base64 \
      > ${LDAP_NSSDB_NOISE}
      echo ${NSSDB_PASS} > ${LDAP_NSSDB_PASS}

      # Create New Key Databases
      __switch_user /usr/bin/certutil -N  \
        -d "${LDAP_CERTS_DIR}"   \
        -f "${LDAP_NSSDB_PASS}"

      # Create New CA Certicicate
      certutil -S -x             \
        -d "${LDAP_CERTS_DIR}"   \
        -f "${LDAP_NSSDB_PASS}"  \
        -z "${LDAP_NSSDB_NOISE}" \
        -n "${NSSDB_CACERT_NAME}"\
        -s "CN=CAcert"           \
        -t "CT,,"                \
        -k "rsa"                 \
        -Z "SHA512"              \
        -g "4096"                \
        -v "120"

      # Create New Certificate Signed CA
      certutil -S                \
        -d "${LDAP_CERTS_DIR}"   \
        -f "${LDAP_NSSDB_PASS}"  \
        -z "${LDAP_NSSDB_NOISE}" \
        -c "${NSSDB_CACERT_NAME}"\
        -n "${NSSDB_CERT_NAME}"  \
        -s "CN=${SSL_HOSTNAME}" \
        -t "u,u,u"               \
        -k "rsa"                 \
        -Z "SHA512"              \
        -g "4096"                \
        -v "120"                 \
        -8 "${SSL_HOSTNAME},localhost,localhost.localdomain"
    fi

    if [ ! -s "${LDAP_CERTS_DIR}/ca.pem" ]; then
      certutil -L                \
        -d "${LDAP_CERTS_DIR}"   \
        -f "${LDAP_NSSDB_PASS}"  \
        -n "${NSSDB_CACERT_NAME}"\
        -a > ${LDAP_CERTS_DIR}/${CA_PEM_FILE}
    fi

    if [ ! -s ${LDAP_CERTS_DIR}/server.pem ]; then
      certutil -L                \
        -d "${LDAP_CERTS_DIR}"   \
        -f "${LDAP_NSSDB_PASS}"  \
        -n "${NSSDB_CERT_NAME}"  \
        -a > ${LDAP_CERTS_DIR}/${SERVER_PEM_FILE}
    fi


set +x
  fi
}

function __slapd_deploy() {
  __mkldif_global
  __mkldif_schema
  __mkldif_frontend
  __mkldif_config
  __mkldif_monitor
  __mkldif_mdb
  __mkldif_tls

  __set_slapd_uri
  __mkcert_selfsigned

  cat ${LDAP_WORK_DIR}/tmp_global.ldif   \
      ${LDAP_WORK_DIR}/tmp_schema.ldif   \
      ${LDAP_WORK_DIR}/tmp_frontend.ldif \
      ${LDAP_WORK_DIR}/tmp_config.ldif   \
      ${LDAP_WORK_DIR}/tmp_monitor.ldif  \
      ${LDAP_WORK_DIR}/tmp_mdb.ldif      \
    > ${LDAP_WORK_DIR}/config.ldif

  __mkldif_base_domain
  __mkldif_unit_user
  __mkldif_unit_group

  cat ${LDAP_WORK_DIR}/tmp_base_domain.ldif \
      ${LDAP_WORK_DIR}/tmp_unit_user.ldif   \
      ${LDAP_WORK_DIR}/tmp_unit_group.ldif  \
    > ${LDAP_WORK_DIR}/base.ldif
}

function __slapd_install() {
  __switch_user /usr/sbin/slapadd -v -F ${LDAP_CONFIG_DIR} \
    -n 0 -l ${LDAP_WORK_DIR}/config.ldif
  __switch_user /usr/sbin/slapadd -v -F ${LDAP_CONFIG_DIR} \
    -n 2 -l ${LDAP_WORK_DIR}/base.ldif
}

function __slapd_cleanup() {
  rm -rf ${LDAP_WORK_DIR}/tmp_*
}

function __slapd_call_pid() {
  _PID=

  _PID_FILE="/var/run/openldap/slapd.pid"

  if [ -s ${_PID_FILE} ]; then
    _PID=$(cat ${_PID_FILE})
  fi

  _PID=${_PID:-noproc}
}

function __slapd_start() {
  __slapd_call_pid

  if [ "noproc" = "${_PID}" ]; then
    /usr/sbin/slapd -d ${SLAPD_DEBUG_LEVEL} \
    -h "${_SLAPD_LDAP_ARGS} ${_SLAPD_LDAPI_ARGS} ${_SLAPD_LDAPS_ARGS}" \
    -F ${LDAP_CONFIG_DIR} \
    -u ldap
  fi
}

function __slapd_stop() {
  __slapd_call_pid

  if [ "noproc" != "${_PID}" ]; then
    kill -INT ${_PID}
    rm ${_PID_FILE}
  fi
}

function __slapd_status() {
  __slapd_call_pid

  if [ "noproc" != "${_PID}" ]; then
    echo "running slapd... [Pid: ${_PID}]"
  else
    echo "stopping slapd..."
  fi
}
